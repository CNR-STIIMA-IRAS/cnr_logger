#ifndef __CNR__LOGGER__H__
#define __CNR__LOGGER__H__

#include <iostream>
#include <ros/ros.h>
#include <ros/file_log.h>
#include <ros/console.h>

#include <log4cxx/logger.h>
#include <log4cxx/basicconfigurator.h>
#include <log4cxx/propertyconfigurator.h>
#include <log4cxx/helpers/exception.h>
#include <log4cxx/rollingfileappender.h>
#include <log4cxx/consoleappender.h>
#include <log4cxx/patternlayout.h>

#include <boost/date_time/posix_time/posix_time.hpp>
#include <boost/date_time/posix_time/posix_time_io.hpp>

#include <cnr_logger/cnr_logger_macros.h>


namespace cnr_logger
{


inline std::string to_string( const ros::Time& now )
{
  auto current_time = now.toBoost();
  std::stringstream ss;
  auto facet = new boost::posix_time::time_facet("%Y%m%d-%H:%M:%s");
  ss.imbue(std::locale(std::locale::classic(), facet));
  ss << current_time;
  return ss.str();
}

/**
 * @class The TraceLogger class. The class is a wrapper to log4cxx library
 */
class TraceLogger
{
public:

  enum AppenderType { FILE_STREAM = 0, CONSOLE_STREAM = 1, SYNC_FILE_AND_CONSOLE = 2 };

  /**
   * @brief TraceLogger. The constructor does not initilize the class. THe function init() must be called afterwards.
   * @param logger_id: unique id for the logger. When the class has more than one appender configured, the logger_id is postponed with a "_x" letter to make the appender unique.
   */
  TraceLogger( const std::string& logger_id );
  /**
   * @brief TraceLogger: The constructor fully initilize the class.
   * @param logger_id: unique id for the logger. When the class has more than one appender configured, the logger_id is postponed with a "_x" letter to make the appender unique.
   * @param param_namespace: absolute namespacewhere the initialization parameters are stored.
   * @param star_header: if the first log is with '***' to make easy to find the start of the logging in the file.
   */
  TraceLogger( const std::string& logger_id, const std::string& param_namespace, const bool star_header = false );
  ~TraceLogger( );

  /**
   * @brief init
   * * @param logger_id: unique id for the logger. When the class has more than one appender configured, the logger_id is postponed with a "_x" letter to make the appender unique.
   * @param param_namespace: absolute namespacewhere the initialization parameters are stored.
   * @param star_header: if the first log is with '***' to make easy to find the start of the logging in the file.
     @param default_values: in the case the parameters are not found under the input namespace, the default configuration is loaded. If FALSE, the function returns false if the parameters are not found.
   * @return True if correctly initialized
   */
  bool init (const std::string& param_namespace, const bool star_header = false, const bool default_values = true);


  bool logFile()             { return ( loggers_.find( FILE_STREAM )           != loggers_.end() ) ; }
  bool logScreen()           { return ( loggers_.find( CONSOLE_STREAM )        != loggers_.end() ) ; }
  bool logSyncFileAndScreen(){ return ( loggers_.find( SYNC_FILE_AND_CONSOLE ) != loggers_.end() ) ; }

  std::map< AppenderType, log4cxx::LoggerPtr > loggers_;
  std::map< AppenderType, std::string        > levels_;
  const std::string logger_id_;

private:

  bool check( const std::string& param_namespace );
  bool initialized_;

};




}
#endif
